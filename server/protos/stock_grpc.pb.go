// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: protos/stock.proto

package go_grpc_poc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SaveSharePriceClient is the client API for SaveSharePrice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaveSharePriceClient interface {
	StoreStockDatabase(ctx context.Context, opts ...grpc.CallOption) (SaveSharePrice_StoreStockDatabaseClient, error)
}

type saveSharePriceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaveSharePriceClient(cc grpc.ClientConnInterface) SaveSharePriceClient {
	return &saveSharePriceClient{cc}
}

func (c *saveSharePriceClient) StoreStockDatabase(ctx context.Context, opts ...grpc.CallOption) (SaveSharePrice_StoreStockDatabaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &SaveSharePrice_ServiceDesc.Streams[0], "/usermgmt.SaveSharePrice/StoreStockDatabase", opts...)
	if err != nil {
		return nil, err
	}
	x := &saveSharePriceStoreStockDatabaseClient{stream}
	return x, nil
}

type SaveSharePrice_StoreStockDatabaseClient interface {
	Send(*StockPrice) error
	CloseAndRecv() (*PriceResponse, error)
	grpc.ClientStream
}

type saveSharePriceStoreStockDatabaseClient struct {
	grpc.ClientStream
}

func (x *saveSharePriceStoreStockDatabaseClient) Send(m *StockPrice) error {
	return x.ClientStream.SendMsg(m)
}

func (x *saveSharePriceStoreStockDatabaseClient) CloseAndRecv() (*PriceResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PriceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SaveSharePriceServer is the server API for SaveSharePrice service.
// All implementations must embed UnimplementedSaveSharePriceServer
// for forward compatibility
type SaveSharePriceServer interface {
	StoreStockDatabase(SaveSharePrice_StoreStockDatabaseServer) error
	mustEmbedUnimplementedSaveSharePriceServer()
}

// UnimplementedSaveSharePriceServer must be embedded to have forward compatible implementations.
type UnimplementedSaveSharePriceServer struct {
}

func (UnimplementedSaveSharePriceServer) StoreStockDatabase(SaveSharePrice_StoreStockDatabaseServer) error {
	return status.Errorf(codes.Unimplemented, "method StoreStockDatabase not implemented")
}
func (UnimplementedSaveSharePriceServer) mustEmbedUnimplementedSaveSharePriceServer() {}

// UnsafeSaveSharePriceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaveSharePriceServer will
// result in compilation errors.
type UnsafeSaveSharePriceServer interface {
	mustEmbedUnimplementedSaveSharePriceServer()
}

func RegisterSaveSharePriceServer(s grpc.ServiceRegistrar, srv SaveSharePriceServer) {
	s.RegisterService(&SaveSharePrice_ServiceDesc, srv)
}

func _SaveSharePrice_StoreStockDatabase_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SaveSharePriceServer).StoreStockDatabase(&saveSharePriceStoreStockDatabaseServer{stream})
}

type SaveSharePrice_StoreStockDatabaseServer interface {
	SendAndClose(*PriceResponse) error
	Recv() (*StockPrice, error)
	grpc.ServerStream
}

type saveSharePriceStoreStockDatabaseServer struct {
	grpc.ServerStream
}

func (x *saveSharePriceStoreStockDatabaseServer) SendAndClose(m *PriceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *saveSharePriceStoreStockDatabaseServer) Recv() (*StockPrice, error) {
	m := new(StockPrice)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SaveSharePrice_ServiceDesc is the grpc.ServiceDesc for SaveSharePrice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaveSharePrice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usermgmt.SaveSharePrice",
	HandlerType: (*SaveSharePriceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StoreStockDatabase",
			Handler:       _SaveSharePrice_StoreStockDatabase_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/stock.proto",
}
